# -*- coding: utf-8 -*-
"""SMSClassifier1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12fhcmFh57oiPYr7Rf5TKQak_h8hbk6UK
"""

import numpy as np
import pandas as pd

df = pd.read_csv('spam.csv',encoding='latin-1')

df.sample(5)

#data cleaning 
df.info()

#removing the columns which have maximum null values 
df.drop(columns=['Unnamed: 2','Unnamed: 3','Unnamed: 4'],inplace=True)

df.rename(columns={'v1':'target','v2':'text'},inplace=True)

from sklearn.preprocessing import LabelEncoder
encoder=LabelEncoder()

df['target']=encoder.fit_transform(df['target'])

df.isnull().sum()

df.duplicated().sum()

df=df.drop_duplicates(keep='first')

df.duplicated().sum()

#Data Analysis
df['target'].value_counts()

import matplotlib.pyplot as plt
plt.pie(df['target'].value_counts(),labels=['ham','spam'],autopct="0.2f")
plt.show()

import nltk    #natural language tookit

nltk.download('punkt')

pip install nltk

df['num_characters']=df['text'].apply(len)  #gives the length of each text line

df['num_words']=df['text'].apply(lambda x:nltk.word_tokenize(x))

df.head()

df['num_sentences']=df['text'].apply(lambda x:len(nltk.sent_tokenize(x)))

df.head()

df[['num_characters','num_words','num_sentences']].describe()

df[df['target']==0][['num_characters','num_words','num_sentences']].describe()

df[df['target']==1][['num_characters','num_words','num_sentences']].describe()

import seaborn as sns

sns.histplot(df[df['target']==0]['num_characters'])
sns.histplot(df[df['target']==1]['num_characters'],color='red') 
#ham messages have less number of characters with some exception

sns.pairplot(df,hue='target')

sns.heatmap(df.corr(),annot=True)

#Data preprocessing 
def transform_text(text):
  text=text.lower()
  text=nltk.word_tokenize(text)
  
  y=[]
  for i in text:
    if i.isalnum():
      y.append(i)
  text=y[:]
  y.clear()

  for i in text:
    if i not in stopwords.words('english') and i not in string.punctuation:
      y.append(i)
  text=y[:]
  y.clear()

  for i in text:
    y.append(ps.stem(i))

  return " ".join(y)

import nltk
nltk.download('stopwords')
import string

from nltk.corpus import stopwords
stop_words = stopwords.words('english')

transform_text('SMS classifier Loved By me  ?')

from nltk.stem.porter import PorterStemmer 
ps=PorterStemmer()
ps.stem('singing')

df['transformed_text']=df['text'].apply(transform_text)

df.head()

spam_corpus=[]
for msg in df[df['target']==1]['transformed_text'].tolist():
 for word in msg.split():
   spam_corpus.append(word)

len(spam_corpus)

from collections import Counter
sns.barplot(pd.DataFrame(Counter(spam_corpus).most_common(30))[0],pd.DataFrame(Counter(spam_corpus).most_common(30))[1])
plt.xticks(rotation='vertical')
plt.show()

ham_corpus=[]
for msg in df[df['target']==0]['transformed_text'].tolist():
 for word in msg.split():
   ham_corpus.append(word)

len(ham_corpus)

from collections import Counter
sns.barplot(pd.DataFrame(Counter(ham_corpus).most_common(30))[0],pd.DataFrame(Counter(ham_corpus).most_common(30))[1])
plt.xticks(rotation='vertical')
plt.show()

#Model Buliding 
#vectorization is performed first 
from sklearn.feature_extraction.text import CountVectorizer,TfidfVectorizer
tfidf=TfidfVectorizer(max_features=3000)
cv=CountVectorizer()

X=tfidf.fit_transform(df['transformed_text']).toarray()

X.shape

y=df['target'].values

y

from sklearn.model_selection import train_test_split

X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=2)

from sklearn.naive_bayes import GaussianNB,MultinomialNB,BernoulliNB

gnb=GaussianNB()
mnb=MultinomialNB()
bnb=BernoulliNB()

from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix
from sklearn.metrics import precision_score
gnb.fit(X_train,y_train)
y_pred1=gnb.predict(X_test)
print(accuracy_score(y_test,y_pred1))
print(confusion_matrix(y_test,y_pred1))
print(precision_score(y_test,y_pred1))

mnb.fit(X_train,y_train)
y_pred2=mnb.predict(X_test)
print(accuracy_score(y_test,y_pred2))
print(confusion_matrix(y_test,y_pred2))
print(precision_score(y_test,y_pred2))
#changing counter to tfidvector precision score is improved 
#as our model is more affected by the precision score ,so we sill go with multinomialNB

bnb.fit(X_train,y_train)
y_pred3=bnb.predict(X_test)
print(accuracy_score(y_test,y_pred3))
print(confusion_matrix(y_test,y_pred3))
print(precision_score(y_test,y_pred3))

import pickle
 pickle.dump(tfidf,open('vectorizer.pkl','wb'))
 pickle.dump(mnb,open('model.pkl','wb'))

